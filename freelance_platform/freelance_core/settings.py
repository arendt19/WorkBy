"""
Django settings for freelance_core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages

# Загрузка переменных окружения из .env файла (если доступно)
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("Переменные окружения загружены из .env")
except ImportError:
    print("python-dotenv не установлен, загрузка переменных из .env пропущена")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-m3!7+k_)1g1!iw!#iqo&z6dqj7=^c-8s@(12v&a3l90z#bz%!9')

# SECURITY WARNING: don't run with debug turned on in production!
# Определение режима отладки на основе переменной окружения
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 't')

# Определяем, запущен ли сервер на локальной машине
IS_LOCAL = os.environ.get('SERVER_ENV', 'local') == 'local'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'workby.onrender.com', '*']

# CSRF настройки для ngrok и других внешних сервисов
CSRF_TRUSTED_ORIGINS = ['https://workby.onrender.com', 'http://127.0.0.1:8000', 'http://localhost:8000', 'https://127.0.0.1:8000', 'https://localhost:8000']

# Настройка прокси-заголовка для определения протокола (для production)
if not IS_LOCAL:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Производственные настройки безопасности - только для production
if not DEBUG and not IS_LOCAL:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 год
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'
else:
    # Для локальной разработки отключаем редирект на HTTPS
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Application definition

INSTALLED_APPS = [
    # Сначала регистрируем modeltranslation
    'modeltranslation',  # Добавляем поддержку перевода моделей
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Сторонние библиотеки
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'crispy_forms',
    'crispy_bootstrap4',
    'rest_framework',
    'channels',
    
    # Наши приложения
    'accounts',
    'jobs',
    'payments',
    'chat',
]

# Добавляем дополнительные приложения только для локальной разработки
# Эти приложения не будут загружаться на production сервере

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Для многоязычности
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Добавляем middleware для django-allauth
]

ROOT_URLCONF = 'freelance_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # Для многоязычности
                'payments.context_processors.wallet_balance',  # Добавляем баланс
            ],
        },
    },
]

WSGI_APPLICATION = 'freelance_core.wsgi.application'
ASGI_APPLICATION = 'freelance_core.asgi.application'  # Для Channels

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Раскомментируйте для использования PostgreSQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'freelance_db',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Asia/Almaty'  # Временная зона для Казахстана

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Доступные языки для выбора
LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian')),
    ('kk', _('Kazakh')),
]

# Папки с переводами
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Настройки для переключения языков
LANGUAGE_COOKIE_NAME = 'django_language'
LANGUAGE_COOKIE_AGE = 60 * 60 * 24 * 365  # 1 год
LANGUAGE_COOKIE_DOMAIN = None
LANGUAGE_COOKIE_PATH = '/'
LANGUAGE_COOKIE_SECURE = False
LANGUAGE_COOKIE_HTTPONLY = True
LANGUAGE_COOKIE_SAMESITE = 'Lax'

# Настройка для исправления ошибки "Session data corrupted"
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 дней

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки для django-allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

# Настройки для django-crispy-forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Custom User model
AUTH_USER_MODEL = 'accounts.User'

# Channels configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Настройки платежной системы (заглушка)
PAYMENT_GATEWAY = {
    'TEST_MODE': True,
}

# Настройки ЮMoney
YOOMONEY_SETTINGS = {
    'CLIENT_ID': '053B16D914F2032BF03FCF426F81F0E054090A520191C5C880CBC7143B9CE1CB',
    'CLIENT_SECRET': 'F87AC80026140E9D7C4E66FCE2A4316A49F5C3F7E276E3A3AC9503A34EFD7C660B512364154A3F0F1115DAF6F9A66BCE21958A21C21D3411455C2CA617F310C2',
    'REDIRECT_URI': 'https://workby.onrender.com/payments/yoomoney/success/',
    'NOTIFICATION_URI': 'https://workby.onrender.com/payments/yoomoney/notification/',
}

# Email settings (для разработки)
EMAIL_ENABLED = False  # Установите True для включения отправки писем
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@freelancekz.com'
SERVER_EMAIL = 'server@freelancekz.com'

# Для production рекомендуется использовать SMTP
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_password'

# URL сайта для использования в уведомлениях
SITE_URL = 'https://workby.onrender.com'

# Настройки для modeltranslation
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
MODELTRANSLATION_LANGUAGES = ('en', 'ru', 'kk')

# Security Settings (удалены дублирующие настройки)


ADMIN_EMAIL = 'admin@workby.com'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}
